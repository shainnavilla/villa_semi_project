1. Q: In line 40, what is the second parameter of bufferData() and why do we pass a number instead of data to vBuffer?
   A: The second parameter is 8 * maxNumPositions. We pass a number (the total byte size) so WebGL allocates empty space in the GPU for vertex positions. The actual rectangle coordinates are added later using gl.bufferSubData() when the user clicks.

2. Q: What does cIndex represent in the code?
   A: cIndex stores the index of the currently selected option in the color menu (<select id="menu">). It decides which color from the colors array will be used for the next rectangle.

3. Q: If the canvas is 500 pixels wide and the mouse is at position 300, what would xPos be?
   A: xPos=2∗(300/500)−1=2∗0.6−1=0.2

4. Q: If t[0] is [200, 142] and t[2] is [152, 300], what would t[1] and t[3] be?
   A: t[1] = [t[0][0], t[2][1]] = [200, 300]
      t[3] = [t[2][0], t[0][1]] = [152, 142]

5. Q: How many rectangles have been drawn if the index value is 252?
   A: 252 / 4 = 63 rectangles have been drawn.

6. Q: In line 101, what is the offset parameter and why is it calculated this way?
   A: The offset is 16 * (index - 4 + i). Each color is a vec4 (4 floats), each float is 4 bytes, so 16 bytes per color. Multiplying by (index - 4 + i) ensures each vertex’s color is written into the correct location in the color buffer.

7. Q: I want your program to go from rectangles to circles and freehand curves. How would you would implement that (in abstract), and what new concepts (mathematical or programming) would you need (give me at least 3 concepts that you would need)
   A: To draw circles, I’d use many small triangles in a fan and compute points with sin/cos. For freehand curves, I’d record mouse positions on mousemove and connect them. To smooth curves, I’d apply Bezier or spline math.